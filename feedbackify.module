<?php

/**
 * @file
 * Contains feedbackify.module.
 */
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function feedbackify_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the feedbackify module.
    case 'help.page.feedbackify':
      $output = '';
      $output .= '<h3>' . (string) t('About') . '</h3>';
      $output .= '<p>' . (string) t('Please use your form ID from your Feedbackify account. See http://www.feedbackify.com for a demo and more information.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Add Feedbackify library if allowed.
 */
function feedbackify_page_attachments_alter(array &$page) {
  // Check for current user permissions.
  if (!\Drupal::currentUser()->hasPermission('view feedbackify button')) {
    return;
  }

  // Disallow adding the script on admin pages.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    return;
  }

  $config = \Drupal::config('feedbackify.settings');

  // Check for specified pages visibility rules.
  if (!_feedbackify_visibility_pages($config)) {
    return;
  }

  // Feedbackify ID is a must configuration.
  if ($id = $config->get('confs.feedbackify_id')) {
    $page['#attached']['library'][] = 'feedbackify/feedbackify';
    $page['#attached']['drupalSettings']['feedbackify'] = [
      'feedbackifyId' => $id,
      'feedbackifyPos' => $config->get('confs.feedbackify_position'),
      'feedbackifyColor' => $config->get('confs.feedbackify_color'),
    ];
  }
}

/**
 * Helper function.
 *
 * Determine if the Feedbackify code should be attached to the current page.
 */
function _feedbackify_visibility_pages($config) {
  // Make it possible deactivate Feedbackify with
  // parameter ?feedbackify=no in the url.
  if (isset($_GET['feedbackify']) && $_GET['feedbackify'] == 'no') {
    return FALSE;
  }

  $page_match = FALSE;
  $pages = $config->get('advanced.feedbackify_pages');

  // Match path if necessary.
  if (!empty($pages)) {
    // Compare the lowercase path alias (if any) and internal path.
    $current_path = Url::fromRoute('<current>')->toString();
    $path_alias = \Drupal::service('path.alias_manager')
      ->getAliasByPath($current_path);
    // Try to match the alias.
    $page_match = \Drupal::service('path.matcher')
      ->matchPath($path_alias, $pages);
    if ($path_alias != $current_path) {
      $page_match = $page_match || \Drupal::service('path.matcher')
          ->matchPath($current_path, $pages);
    }

    // When $visibility has a value of 0, the block is displayed on
    // all pages except those listed in $pages. When set to 1, it
    // is displayed only on those pages listed in $pages.
    $page_match = !($config->get('advanced.feedbackify_visibility') xor $page_match);
  }
  else {
    $page_match = TRUE;
  }

  return $page_match;
}
